generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Servers {
  id        Int        @id @default(autoincrement())
  ips       String[]
  alert     String
  visible   Boolean[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  timeline  Timeline[]
  teams     Teams[]
  images    Images[]

  @@map("servers")
}

model Timeline {
  id          Int       @id @default(autoincrement())
  title       String
  subtitle    String
  description String
  year        Int
  images      String[]
  url         String[]
  button      Boolean[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  Servers     Servers?  @relation(fields: [serversId], references: [id])
  serversId   Int?

  @@map("timeline")
}

model Teams {
  id        Int      @id @default(autoincrement())
  name      String
  role      String
  url       String
  image     String
  location  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  Servers   Servers? @relation(fields: [serversId], references: [id])
  serversId Int?

  @@map("teams")
}

model Images {
  id        Int      @id @default(autoincrement())
  image     String
  alt       String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  Servers   Servers? @relation(fields: [serversId], references: [id])
  serversId Int?

  @@map("images")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  role          String    @default("user")
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
